{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Oriana\\\\Documents\\\\Daniel\\\\infocasas\\\\infocasas-frontend-challenge\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport NewTaskCard from '../components/Cards/NewTaskCard';\nimport TaskCard from '../components/Cards/TaskCard';\nimport SearchBar from '../components/SearchBar/SearchBar';\nconst {\n  API_URL\n} = process.env;\n\nconst index = ({\n  data\n}) => {\n  const {\n    0: tasks,\n    1: setTasks\n  } = useState(data);\n  const {\n    0: filtered,\n    1: setFiltered\n  } = useState(data);\n  const {\n    0: newTask,\n    1: setNewTask\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  console.log(API_URL);\n\n  const perFiltered = searchParam => {\n    let tasksFiltered = tasks;\n\n    if (searchParam.length == 0) {\n      setFiltered(tasks);\n    } else {\n      tasksFiltered = tasksFiltered.filter(e => e.title.toLowerCase().replace(/ /g, '').match(searchParam ? searchParam.toLowerCase().replace(/ /g, '').replace(/#/g, '') : ''));\n      setFiltered(tasksFiltered);\n    }\n  };\n\n  const handleSummit = async (title, body) => {\n    try {\n      const response = await fetch(`${API_URL}`, {\n        method: 'POST',\n        body: JSON.stringify({\n          title: title,\n          body: body,\n          status: false\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      let json = await response.json();\n      console.log(json);\n      let newData = tasks;\n      await newData.push(json);\n      console.log(newData);\n      setTasks(newData);\n      setFiltered(newData);\n      setNewTask(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleUpdate = async (title, body, newTitle, newBody, id, index, setEdit) => {\n    if (newTitle !== title || newBody !== body) {\n      setLoading(true);\n\n      try {\n        id < 6 ? id = id : id = 1;\n        const response = await fetch(`${API_URL}/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify({\n            title: newTitle,\n            body: newBody\n          }),\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8'\n          }\n        });\n        const json = await response.json();\n        let newArr = tasks;\n        newArr[index] = json;\n        setTasks(newArr);\n        setFiltered(newArr);\n        setLoading(false);\n        setEdit(false);\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      console.log(\"no se ha hecho ninguna modificaciÃ³n\");\n    }\n  };\n\n  const handleDelete = async (id, index) => {\n    setLoading(true);\n\n    try {\n      id < 6 ? id = id : id = 1;\n      await fetch(`${API_URL}/${id}`, {\n        method: 'DELETE'\n      });\n      let newArr = tasks;\n      newArr.splice(index, 1);\n      setTasks(newArr);\n      setFiltered(newArr);\n      setLoading(false);\n      console.log(newArr);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  const handleCheck = async (index, status) => {\n    let newArr = tasks;\n    newArr[index].status = status;\n    setTasks(newArr);\n    setFiltered(newArr);\n    console.log(newArr);\n  };\n\n  return __jsx(\"div\", {\n    className: \"tasks-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, \"Lista de Tareas\"), __jsx(SearchBar, {\n    perFiltered: perFiltered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    onClick: () => setNewTask(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, \"Nueva tarea\"), __jsx(\"button\", {\n    onClick: () => {\n      setFiltered(tasks);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, \"Todas\"), __jsx(\"button\", {\n    className: \"btn btn-warning\",\n    onClick: () => {\n      const arr = tasks.filter(arr => {\n        if (arr.status == false) return true;\n      });\n      console.log(arr);\n      setFiltered(arr);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Pendientes\"), __jsx(\"button\", {\n    className: \"btn btn-success\",\n    onClick: () => {\n      const arr = tasks.filter(arr => {\n        if (arr.status == true) return true;\n      });\n      console.log(arr);\n      setFiltered(arr);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, \"Realizadas\"), newTask && __jsx(NewTaskCard, {\n    setNewTask: setNewTask,\n    handleSummit: handleSummit,\n    setNewTask: setNewTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 26\n    }\n  }), filtered && filtered.map((item, index) => __jsx(TaskCard, {\n    key: `${item}-${index}`,\n    index: index,\n    id: item.id,\n    title: item.title,\n    body: item.body,\n    status: item.status,\n    handleUpdate: handleUpdate,\n    handleDelete: handleDelete,\n    handleCheck: handleCheck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 58\n    }\n  })));\n};\n\nexport async function getServerSideProps(context) {\n  const res = await fetch(`${API_URL}`);\n  const data = await res.json();\n\n  if (!data) {\n    console.log(data);\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false\n      }\n    };\n  }\n\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default index;","map":{"version":3,"sources":["C:/Users/Oriana/Documents/Daniel/infocasas/infocasas-frontend-challenge/pages/index.js"],"names":["React","useEffect","useState","NewTaskCard","TaskCard","SearchBar","API_URL","process","env","index","data","tasks","setTasks","filtered","setFiltered","newTask","setNewTask","loading","setLoading","console","log","perFiltered","searchParam","tasksFiltered","length","filter","e","title","toLowerCase","replace","match","handleSummit","body","response","fetch","method","JSON","stringify","status","headers","json","newData","push","error","handleUpdate","newTitle","newBody","id","setEdit","newArr","handleDelete","splice","handleCheck","arr","map","item","getServerSideProps","context","res","redirect","destination","permanent","props"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcC,OAAO,CAACC,GAA5B;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAEtB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAACQ,IAAD,CAAlC;AACA,QAAM;AAAA,OAACG,QAAD;AAAA,OAAWC;AAAX,MAA0BZ,QAAQ,CAACQ,IAAD,CAAxC;AACA,QAAM;AAAA,OAACK,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACe,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AAEAiB,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;;AAEA,QAAMe,WAAW,GAAIC,WAAD,IAAiB;AACjC,QAAIC,aAAa,GAAGZ,KAApB;;AACA,QAAIW,WAAW,CAACE,MAAZ,IAAsB,CAA1B,EAA6B;AACzBV,MAAAA,WAAW,CAACH,KAAD,CAAX;AACH,KAFD,MAEO;AAEHY,MAAAA,aAAa,GAAGA,aAAa,CAACE,MAAd,CAAsBC,CAAD,IACjCA,CAAC,CAACC,KAAF,CAAQC,WAAR,GAAsBC,OAAtB,CAA8B,IAA9B,EAAoC,EAApC,EAAwCC,KAAxC,CACIR,WAAW,GAAIA,WAAD,CAAcM,WAAd,GAA4BC,OAA5B,CAAoC,IAApC,EAA0C,EAA1C,EAA8CA,OAA9C,CAAsD,IAAtD,EAA4D,EAA5D,CAAH,GAAqE,EADpF,CADY,CAAhB;AAKAf,MAAAA,WAAW,CAACS,aAAD,CAAX;AACH;AACJ,GAbD;;AAeA,QAAMQ,YAAY,GAAG,OAAOJ,KAAP,EAAcK,IAAd,KAAuB;AAExC,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAOC,KAAK,CAAE,GAAE5B,OAAQ,EAAZ,EAAe;AAC5C6B,QAAAA,MAAM,EAAE,MADoC;AAE5CH,QAAAA,IAAI,EAAEI,IAAI,CAACC,SAAL,CAAe;AACjBV,UAAAA,KAAK,EAAEA,KADU;AAEjBK,UAAAA,IAAI,EAAEA,IAFW;AAGjBM,UAAAA,MAAM,EAAE;AAHS,SAAf,CAFsC;AAO5CC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AAPmC,OAAf,CAA7B;AAWJ,UAAIC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAT,EAAjB;AAEArB,MAAAA,OAAO,CAACC,GAAR,CAAYoB,IAAZ;AAEA,UAAIC,OAAO,GAAG9B,KAAd;AAEA,YAAO8B,OAAO,CAACC,IAAR,CAAaF,IAAb,CAAP;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,OAAZ;AAEA7B,MAAAA,QAAQ,CAAC6B,OAAD,CAAR;AACA3B,MAAAA,WAAW,CAAC2B,OAAD,CAAX;AACAzB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEC,KAzBD,CAyBE,OAAO2B,KAAP,EAAc;AACZxB,MAAAA,OAAO,CAACC,GAAR,CAAYuB,KAAZ;AACH;AAEJ,GA/BD;;AAiCA,QAAMC,YAAY,GAAG,OAAMjB,KAAN,EAAaK,IAAb,EAAmBa,QAAnB,EAA6BC,OAA7B,EAAsCC,EAAtC,EAA0CtC,KAA1C,EAAiDuC,OAAjD,KAA6D;AAE9E,QAAGH,QAAQ,KAAKlB,KAAb,IAAsBmB,OAAO,KAAKd,IAArC,EAA2C;AAClCd,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACD,UAAI;AAEA6B,QAAAA,EAAE,GAAG,CAAL,GAASA,EAAE,GAAGA,EAAd,GAAqBA,EAAE,GAAG,CAA1B;AAEJ,cAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE5B,OAAQ,IAAGyC,EAAG,EAAlB,EAAqB;AAC7CZ,UAAAA,MAAM,EAAE,KADqC;AAE7CH,UAAAA,IAAI,EAAEI,IAAI,CAACC,SAAL,CAAe;AACrBV,YAAAA,KAAK,EAAEkB,QADc;AAErBb,YAAAA,IAAI,EAAEc;AAFe,WAAf,CAFuC;AAM7CP,UAAAA,OAAO,EAAE;AACT,4BAAgB;AADP;AANoC,SAArB,CAA5B;AAWA,cAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAT,EAAnB;AACA,YAAIS,MAAM,GAAGtC,KAAb;AACAsC,QAAAA,MAAM,CAACxC,KAAD,CAAN,GAAgB+B,IAAhB;AAEA5B,QAAAA,QAAQ,CAACqC,MAAD,CAAR;AACAnC,QAAAA,WAAW,CAACmC,MAAD,CAAX;AACA/B,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA8B,QAAAA,OAAO,CAAC,KAAD,CAAP;AACC,OAvBD,CAuBE,OAAOL,KAAP,EAAc;AAEZxB,QAAAA,OAAO,CAACC,GAAR,CAAYuB,KAAZ;AACH;AAER,KA9BD,MA8BK;AACDxB,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACH;AACJ,GAnCD;;AAqCA,QAAM8B,YAAY,GAAG,OAAMH,EAAN,EAAUtC,KAAV,KAAoB;AACrCS,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AAEA6B,MAAAA,EAAE,GAAG,CAAL,GAASA,EAAE,GAAGA,EAAd,GAAqBA,EAAE,GAAG,CAA1B;AAED,YAAMb,KAAK,CAAE,GAAE5B,OAAQ,IAAGyC,EAAG,EAAlB,EAAqB;AAC3BZ,QAAAA,MAAM,EAAE;AADmB,OAArB,CAAX;AAIK,UAAIc,MAAM,GAAGtC,KAAb;AACAsC,MAAAA,MAAM,CAACE,MAAP,CAAe1C,KAAf,EAAsB,CAAtB;AAEAG,MAAAA,QAAQ,CAACqC,MAAD,CAAR;AACAnC,MAAAA,WAAW,CAACmC,MAAD,CAAX;AACA/B,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY6B,MAAZ;AAEP,KAhBD,CAgBE,OAAON,KAAP,EAAc;AACZxB,MAAAA,OAAO,CAACC,GAAR,CAAYuB,KAAZ;AACAzB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAtBD;;AAwBA,QAAMkC,WAAW,GAAG,OAAO3C,KAAP,EAAc6B,MAAd,KAAyB;AAGjC,QAAIW,MAAM,GAAGtC,KAAb;AACAsC,IAAAA,MAAM,CAACxC,KAAD,CAAN,CAAc6B,MAAd,GAAuBA,MAAvB;AAEA1B,IAAAA,QAAQ,CAACqC,MAAD,CAAR;AACAnC,IAAAA,WAAW,CAACmC,MAAD,CAAX;AAEA9B,IAAAA,OAAO,CAACC,GAAR,CAAY6B,MAAZ;AAEX,GAXD;;AAcA,SACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI,MAAC,SAAD;AACA,IAAA,WAAW,EAAE5B,WADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAKI;AACA,IAAA,OAAO,EAAG,MAAML,UAAU,CAAC,IAAD,CAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALJ,EAUI;AACA,IAAA,OAAO,EAAE,MAAM;AACXF,MAAAA,WAAW,CAACH,KAAD,CAAX;AACH,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAVJ,EAeI;AACA,IAAA,SAAS,EAAC,iBADV;AAEA,IAAA,OAAO,EAAG,MAAM;AACZ,YAAM0C,GAAG,GAAG1C,KAAK,CAACc,MAAN,CAAe4B,GAAD,IAAS;AAC/B,YAAIA,GAAG,CAACf,MAAJ,IAAc,KAAlB,EAAyB,OAAO,IAAP;AAC5B,OAFW,CAAZ;AAGAnB,MAAAA,OAAO,CAACC,GAAR,CAAYiC,GAAZ;AACAvC,MAAAA,WAAW,CAACuC,GAAD,CAAX;AACH,KARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfJ,EAyBI;AACA,IAAA,SAAS,EAAC,iBADV;AAEA,IAAA,OAAO,EAAG,MAAM;AACZ,YAAMA,GAAG,GAAG1C,KAAK,CAACc,MAAN,CAAe4B,GAAD,IAAS;AAC/B,YAAIA,GAAG,CAACf,MAAJ,IAAc,IAAlB,EAAwB,OAAO,IAAP;AAC3B,OAFW,CAAZ;AAGAnB,MAAAA,OAAO,CAACC,GAAR,CAAYiC,GAAZ;AACAvC,MAAAA,WAAW,CAACuC,GAAD,CAAX;AACH,KARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzBJ,EAmCKtC,OAAO,IAAK,MAAC,WAAD;AAEb,IAAA,UAAU,EAAEC,UAFC;AAGb,IAAA,YAAY,EAAGe,YAHF;AAIb,IAAA,UAAU,EAAEf,UAJC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnCjB,EA0CKH,QAAQ,IAAIA,QAAQ,CAACyC,GAAT,CAAc,CAACC,IAAD,EAAO9C,KAAP,KAAkB,MAAC,QAAD;AAC7C,IAAA,GAAG,EAAG,GAAE8C,IAAK,IAAG9C,KAAM,EADuB;AAE7C,IAAA,KAAK,EAAEA,KAFsC;AAG7C,IAAA,EAAE,EAAE8C,IAAI,CAACR,EAHoC;AAI7C,IAAA,KAAK,EAAGQ,IAAI,CAAC5B,KAJgC;AAK7C,IAAA,IAAI,EAAG4B,IAAI,CAACvB,IALiC;AAM7C,IAAA,MAAM,EAAGuB,IAAI,CAACjB,MAN+B;AAO7C,IAAA,YAAY,EAAEM,YAP+B;AAQ7C,IAAA,YAAY,EAAEM,YAR+B;AAS7C,IAAA,WAAW,EAAEE,WATgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhC,CA1CjB,CADJ;AAyDH,CA7LD;;AAgMA,OAAO,eAAeI,kBAAf,CAAkCC,OAAlC,EAA2C;AAC9C,QAAMC,GAAG,GAAG,MAAMxB,KAAK,CAAE,GAAE5B,OAAQ,EAAZ,CAAvB;AACA,QAAMI,IAAI,GAAG,MAAMgD,GAAG,CAAClB,IAAJ,EAAnB;;AAGA,MAAI,CAAC9B,IAAL,EAAW;AACPS,IAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACF,WAAO;AACLiD,MAAAA,QAAQ,EAAE;AACRC,QAAAA,WAAW,EAAE,GADL;AAERC,QAAAA,SAAS,EAAE;AAFH;AADL,KAAP;AAMD;;AACD,SAAO;AACLC,IAAAA,KAAK,EAAE;AAACpD,MAAAA;AAAD;AADF,GAAP;AAGD;AAEH,eAAeD,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport NewTaskCard from '../components/Cards/NewTaskCard'\r\nimport TaskCard from '../components/Cards/TaskCard'\r\nimport SearchBar from '../components/SearchBar/SearchBar'\r\n\r\nconst { API_URL } = process.env\r\n\r\nconst index = ({data}) => {\r\n\r\n    const [tasks, setTasks] = useState(data)\r\n    const [filtered, setFiltered] = useState(data)\r\n    const [newTask, setNewTask] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    console.log(API_URL)\r\n\r\n    const perFiltered = (searchParam) => {\r\n        let tasksFiltered = tasks\r\n        if (searchParam.length == 0) {\r\n            setFiltered(tasks)\r\n        } else {\r\n\r\n            tasksFiltered = tasksFiltered.filter((e) =>\r\n                e.title.toLowerCase().replace(/ /g, '').match(\r\n                    searchParam ? (searchParam).toLowerCase().replace(/ /g, '').replace(/#/g, '') : ''\r\n                )\r\n            )                \r\n            setFiltered(tasksFiltered)            \r\n        }\r\n    }\r\n\r\n    const handleSummit = async (title, body) => {        \r\n        \r\n        try {\r\n            const response = await  fetch(`${API_URL}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                title: title,\r\n                body: body,\r\n                status: false\r\n            }),\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8',\r\n            },\r\n            })\r\n        let json = await response.json()\r\n\r\n        console.log(json)\r\n\r\n        let newData = tasks\r\n\r\n        await  newData.push(json)\r\n        console.log(newData)\r\n\r\n        setTasks(newData)\r\n        setFiltered(newData)\r\n        setNewTask(false)\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpdate = async(title, body, newTitle, newBody, id, index, setEdit) => {\r\n\r\n        if(newTitle !== title || newBody !== body ){\r\n                 setLoading(true)\r\n                try {        \r\n                 \r\n                    id < 6 ? id = id   : id = 1\r\n                    \r\n                const response = await fetch(`${API_URL}/${id}`, {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify({\r\n                    title: newTitle,\r\n                    body: newBody\r\n                    }),\r\n                    headers: {\r\n                    'Content-type': 'application/json; charset=UTF-8',\r\n                    },\r\n                })\r\n\r\n                const json = await response.json()\r\n                let newArr = tasks\r\n                newArr[index] = json\r\n\r\n                setTasks(newArr)\r\n                setFiltered(newArr)            \r\n                setLoading(false)\r\n                setEdit(false)\r\n                } catch (error) {\r\n                    \r\n                    console.log(error)\r\n                }\r\n        \r\n        }else{\r\n            console.log(\"no se ha hecho ninguna modificaciÃ³n\")\r\n        }\r\n    }\r\n\r\n    const handleDelete = async(id, index) => {\r\n        setLoading(true)\r\n        try {\r\n\r\n            id < 6 ? id = id   : id = 1\r\n            \r\n           await fetch(`${API_URL}/${id}`, {\r\n                method: 'DELETE',\r\n              });\r\n\r\n                let newArr = tasks \r\n                newArr.splice( index ,1)  \r\n\r\n                setTasks(newArr)    \r\n                setFiltered(newArr) \r\n                setLoading(false)\r\n                console.log(newArr)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleCheck = async (index, status) => {\r\n        \r\n                \r\n                let newArr = tasks \r\n                newArr[index].status = status\r\n\r\n                setTasks(newArr)    \r\n                setFiltered(newArr) \r\n                \r\n                console.log(newArr)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"tasks-table\">\r\n            <h1>Lista de Tareas</h1>\r\n            <SearchBar\r\n            perFiltered={perFiltered} />\r\n\r\n            <button\r\n            onClick={ () => setNewTask(true)   }>\r\n                Nueva tarea\r\n            </button>\r\n\r\n            <button\r\n            onClick={() => {\r\n                setFiltered(tasks)\r\n            }}\r\n            >Todas</button>\r\n            <button\r\n            className=\"btn btn-warning\"\r\n            onClick={ () => {\r\n                const arr = tasks.filter( (arr) => {\r\n                    if (arr.status == false) return true \r\n                })\r\n                console.log(arr)\r\n                setFiltered(arr)\r\n            } }>Pendientes</button>\r\n\r\n            <button\r\n            className=\"btn btn-success\"\r\n            onClick={ () => {\r\n                const arr = tasks.filter( (arr) => {\r\n                    if (arr.status == true) return true \r\n                })\r\n                console.log(arr)\r\n                setFiltered(arr)\r\n            } }>Realizadas</button>\r\n\r\n            {newTask && (<NewTaskCard\r\n            \r\n            setNewTask={setNewTask}\r\n            handleSummit= {handleSummit}\r\n            setNewTask={setNewTask}\r\n            />) }\r\n\r\n            {filtered && filtered.map( (item, index) =>( <TaskCard \r\n            key={`${item}-${index}`}\r\n            index={index}\r\n            id={item.id}\r\n            title= {item.title}\r\n            body= {item.body}\r\n            status= {item.status}\r\n            handleUpdate={handleUpdate}\r\n            handleDelete={handleDelete}\r\n            handleCheck={handleCheck}\r\n            />))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport async function getServerSideProps(context) {\r\n    const res = await fetch(`${API_URL}`)\r\n    const data = await res.json()\r\n  \r\n    \r\n    if (!data) {\r\n        console.log(data)\r\n      return {\r\n        redirect: {\r\n          destination: '/',\r\n          permanent: false,\r\n        },\r\n      }\r\n    }\r\n    return {\r\n      props: {data},\r\n    }\r\n  }\r\n\r\nexport default index\r\n"]},"metadata":{},"sourceType":"module"}