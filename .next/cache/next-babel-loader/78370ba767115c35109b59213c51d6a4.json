{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Oriana\\\\Documents\\\\Daniel\\\\infocasas\\\\infocasas-frontend-challenge\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport NewTaskCard from '../components/Cards/NewTaskCard';\nimport TaskCard from '../components/Cards/TaskCard';\nimport SearchBar from '../components/SearchBar/SearchBar';\nimport { httpGet } from '../libs/http';\n\nconst index = ({\n  data\n}) => {\n  const {\n    0: tasks,\n    1: setTasks\n  } = useState(data);\n  const {\n    0: filtered,\n    1: setFiltered\n  } = useState(data);\n  const {\n    0: newTask,\n    1: setNewTask\n  } = useState(false);\n\n  const perFiltered = searchParam => {\n    let tasksFiltered = tasks;\n\n    if (searchParam.length == 0) {\n      setFiltered(tasks);\n    } else {\n      tasksFiltered = tasksFiltered.filter(e => e.title.toLowerCase().replace(/ /g, '').match(searchParam ? searchParam.toLowerCase().replace(/ /g, '').replace(/#/g, '') : ''));\n      setFiltered(tasksFiltered);\n    }\n  };\n\n  const handleSummit = async (title, body) => {\n    try {\n      const response = await fetch('https://my-json-server.typicode.com/lozcep/infotest/posts', {\n        method: 'POST',\n        body: JSON.stringify({\n          title: title,\n          body: body\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      let json = await response.json();\n      console.log(json);\n      let newData = tasks;\n      await newData.push(json);\n      console.log(newData);\n      setTasks([...tasks], tasks.push(json));\n      setFiltered([...filtered], filtered.push(json));\n      setNewTask(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleUpdate = async (title, body, newTitle, newBody, id, setEdit) => {\n    if (newTitle !== title || newBody !== body) {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify({\n            title: newTitle,\n            body: newBody\n          }),\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8'\n          }\n        });\n        const json = await response.json();\n        setTasks([...tasks, tasks[id - 1] = json]);\n        setFiltered([...filtered, filtered[id - 1] = json]);\n        setEdit(false);\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      console.log(\"no se ha hecho ninguna modificaciÃ³n\");\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Lista de Tareas\"), __jsx(SearchBar, {\n    perFiltered: perFiltered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    onClick: () => setNewTask(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Nueva tarea\"), newTask && __jsx(\"button\", {\n    onClick: () => setNewTask(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 28\n    }\n  }, \"Cancelar\"), newTask && __jsx(NewTaskCard, {\n    setNewTask: setNewTask,\n    handleSummit: handleSummit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 26\n    }\n  }), filtered && filtered.map((item, index) => __jsx(TaskCard, {\n    key: `${item}-${index}`,\n    id: item.id,\n    title: item.title,\n    body: item.body,\n    handleUpdate: handleUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 58\n    }\n  })));\n};\n\nexport async function getServerSideProps(context) {\n  const res = await fetch('https://my-json-server.typicode.com/lozcep/infotest/posts');\n  const data = await res.json();\n\n  if (!data) {\n    console.log(data);\n    return {\n      redirect: {\n        destination: '/',\n        permanent: false\n      }\n    };\n  }\n\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default index;","map":{"version":3,"sources":["C:/Users/Oriana/Documents/Daniel/infocasas/infocasas-frontend-challenge/pages/index.js"],"names":["React","useEffect","useState","NewTaskCard","TaskCard","SearchBar","httpGet","index","data","tasks","setTasks","filtered","setFiltered","newTask","setNewTask","perFiltered","searchParam","tasksFiltered","length","filter","e","title","toLowerCase","replace","match","handleSummit","body","response","fetch","method","JSON","stringify","headers","json","console","log","newData","push","error","handleUpdate","newTitle","newBody","id","setEdit","map","item","getServerSideProps","context","res","redirect","destination","permanent","props"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport NewTaskCard from '../components/Cards/NewTaskCard'\r\nimport TaskCard from '../components/Cards/TaskCard'\r\nimport SearchBar from '../components/SearchBar/SearchBar'\r\nimport { httpGet } from '../libs/http'\r\n\r\nconst index = ({data}) => {\r\n\r\n    const [tasks, setTasks] = useState(data)\r\n    const [filtered, setFiltered] = useState(data)\r\n    const [newTask, setNewTask] = useState(false)\r\n    \r\n\r\n    const perFiltered = (searchParam) => {\r\n        let tasksFiltered = tasks\r\n        if (searchParam.length == 0) {\r\n            setFiltered(tasks)\r\n        } else {\r\n\r\n            tasksFiltered = tasksFiltered.filter((e) =>\r\n                e.title.toLowerCase().replace(/ /g, '').match(\r\n                    searchParam ? (searchParam).toLowerCase().replace(/ /g, '').replace(/#/g, '') : ''\r\n                )\r\n            )                \r\n            setFiltered(tasksFiltered)            \r\n        }\r\n    }\r\n\r\n    const handleSummit = async (title, body) => {        \r\n        \r\n        try {\r\n            const response = await  fetch('https://my-json-server.typicode.com/lozcep/infotest/posts', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                title: title,\r\n                body: body,\r\n            }),\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8',\r\n            },\r\n            })\r\n        let json = await response.json()\r\n\r\n        console.log(json)\r\n\r\n        let newData = tasks\r\n\r\n        await  newData.push(json)\r\n        console.log(newData)\r\n\r\n        setTasks([...tasks], tasks.push(json))\r\n        setFiltered([...filtered], filtered.push(json))\r\n        setNewTask(false)\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    const handleUpdate = async(title, body, newTitle, newBody, id, setEdit) => {\r\n\r\n        if(newTitle !== title || newBody !== body ){\r\n\r\n                try {        \r\n                    \r\n                const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify({\r\n                    title: newTitle,\r\n                    body: newBody\r\n                    }),\r\n                    headers: {\r\n                    'Content-type': 'application/json; charset=UTF-8',\r\n                    },\r\n                })\r\n\r\n              const json = await response.json()\r\n\r\n                setTasks([...tasks, tasks[id-1]= json ])\r\n                setFiltered([...filtered, filtered[id-1]= json ])            \r\n                setEdit(false)\r\n                } catch (error) {\r\n                    \r\n                    console.log(error)\r\n                }\r\n        \r\n        }else{\r\n            console.log(\"no se ha hecho ninguna modificaciÃ³n\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Lista de Tareas</h1>\r\n            <SearchBar\r\n            perFiltered={perFiltered} />\r\n\r\n            <button\r\n            onClick={ () => setNewTask(true)   }>\r\n                Nueva tarea\r\n            </button>\r\n\r\n             { newTask && (<button\r\n            onClick={ () => setNewTask(false) }>\r\n                Cancelar\r\n            </button>)}\r\n\r\n            {newTask && (<NewTaskCard \r\n            setNewTask={setNewTask}\r\n            handleSummit= {handleSummit}\r\n            />) }\r\n\r\n            {filtered && filtered.map( (item, index) =>( <TaskCard \r\n            key={`${item}-${index}`}\r\n            id={item.id}\r\n            title= {item.title}\r\n            body= {item.body}\r\n            handleUpdate={handleUpdate}\r\n            />))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport async function getServerSideProps(context) {\r\n    const res = await fetch('https://my-json-server.typicode.com/lozcep/infotest/posts')\r\n    const data = await res.json()\r\n  \r\n    \r\n    if (!data) {\r\n        console.log(data)\r\n      return {\r\n        redirect: {\r\n          destination: '/',\r\n          permanent: false,\r\n        },\r\n      }\r\n    }\r\n    return {\r\n      props: {data},\r\n    }\r\n  }\r\n\r\nexport default index\r\n"]},"metadata":{},"sourceType":"module"}